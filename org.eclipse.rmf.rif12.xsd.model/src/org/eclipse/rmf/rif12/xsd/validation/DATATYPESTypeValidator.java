/*******************************************************************************
 * Copyright (c) 2011 itemis GmbH.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Nirmal Sasidharan - initial API and implementation
 ******************************************************************************/

package org.eclipse.rmf.rif12.xsd.validation;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.util.FeatureMap;
import org.eclipse.rmf.rif12.xsd.DATATYPEDEFINITIONBINARYFILE;
import org.eclipse.rmf.rif12.xsd.DATATYPEDEFINITIONBOOLEAN;
import org.eclipse.rmf.rif12.xsd.DATATYPEDEFINITIONDATE;
import org.eclipse.rmf.rif12.xsd.DATATYPEDEFINITIONDOCUMENT;
import org.eclipse.rmf.rif12.xsd.DATATYPEDEFINITIONENUMERATION;
import org.eclipse.rmf.rif12.xsd.DATATYPEDEFINITIONINTEGER;
import org.eclipse.rmf.rif12.xsd.DATATYPEDEFINITIONREAL;
import org.eclipse.rmf.rif12.xsd.DATATYPEDEFINITIONSTRING;
import org.eclipse.rmf.rif12.xsd.DATATYPEDEFINITIONXMLDATA;


/**
 * A sample validator interface for {@link org.eclipse.rmf.rif12.xsd.DATATYPESType}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface DATATYPESTypeValidator {
	boolean validate();

	boolean validateGroup(FeatureMap value);
	boolean validateDATATYPEDEFINITIONBINARYFILE(EList<DATATYPEDEFINITIONBINARYFILE> value);
	boolean validateDATATYPEDEFINITIONBOOLEAN(EList<DATATYPEDEFINITIONBOOLEAN> value);
	boolean validateDATATYPEDEFINITIONDATE(EList<DATATYPEDEFINITIONDATE> value);
	boolean validateDATATYPEDEFINITIONDOCUMENT(EList<DATATYPEDEFINITIONDOCUMENT> value);
	boolean validateDATATYPEDEFINITIONENUMERATION(EList<DATATYPEDEFINITIONENUMERATION> value);
	boolean validateDATATYPEDEFINITIONINTEGER(EList<DATATYPEDEFINITIONINTEGER> value);
	boolean validateDATATYPEDEFINITIONREAL(EList<DATATYPEDEFINITIONREAL> value);
	boolean validateDATATYPEDEFINITIONSTRING(EList<DATATYPEDEFINITIONSTRING> value);
	boolean validateDATATYPEDEFINITIONXMLDATA(EList<DATATYPEDEFINITIONXMLDATA> value);
}
